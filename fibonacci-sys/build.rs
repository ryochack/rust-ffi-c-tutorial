use std::env;
use std::path::PathBuf;

fn main() {
    // compile c code
    //   cc crate tells link option to cargo automatically.
    //   this means cc crate print following cargo flags from inside cc,
    //   so programmer doesn't have to explicitly write this in build.rs.
    //     println!("cargo:rustc-link-search=native={}", env::var("OUT_DIR").unwrap());
    //     println!("cargo:rustc-link-lib=fibonacci");
    cc::Build::new()
        .warnings(true)
        .flag("-Wall")
        .flag("-Wextra")
        .file("src/c/fibonacci.c")
        .include("src/c")
        .compile("libfibonacci.a");

    // tell libmpsse header file to bindgen
    let bindings = bindgen::Builder::default()
        .header("src/c/fibonacci.h")
        .generate()
        .expect("Unable to generate bindings!");

    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    // output file generated by bindgen
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Couldn't write bindings!");

}
